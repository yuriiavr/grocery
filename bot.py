import os
import json
import random
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Updater, CommandHandler, CallbackQueryHandler, MessageHandler, Filters, CallbackContext

# –û—Ç—Ä–∏–º—É—î–º–æ —Ç–æ–∫–µ–Ω –∑ –æ—Ç–æ—á–µ–Ω–Ω—è
TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")

if not TOKEN:
    raise ValueError("‚ùå –ü–û–ú–ò–õ–ö–ê: –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ TELEGRAM_BOT_TOKEN —É –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞!")

# –§–∞–π–ª –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö
DATA_FILE = "shopping_groups.json"

# –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å–ø–∏—Å–∫—ñ–≤ —ñ–∑ —Ñ–∞–π–ª—É
def load_data():
    if os.path.exists(DATA_FILE):
        with open(DATA_FILE, "r", encoding="utf-8") as f:
            try:
                return json.load(f)
            except json.JSONDecodeError:
                return {"groups": {}, "user_groups": {}}
    return {"groups": {}, "user_groups": {}}

# –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Å–ø–∏—Å–∫—ñ–≤ —É —Ñ–∞–π–ª
def save_data():
    with open(DATA_FILE, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

# –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –¥–∞–Ω—ñ
data = load_data()

def generate_group_code():
    """ –ì–µ–Ω–µ—Ä—É—î —É–Ω—ñ–∫–∞–ª—å–Ω–∏–π –∫–æ–¥ –¥–ª—è –≥—Ä—É–ø–∏ """
    return str(random.randint(100000, 999999))

def start(update: Update, context: CallbackContext):
    keyboard = [
        [InlineKeyboardButton("üßç –û—Å–æ–±–∏—Å—Ç–∏–π —Å–ø–∏—Å–æ–∫", callback_data="personal")],
        [InlineKeyboardButton("üë• –°—Ç–≤–æ—Ä–∏—Ç–∏ –≥—Ä—É–ø—É", callback_data="create_group")],
        [InlineKeyboardButton("üîó –ü—Ä–∏—î–¥–Ω–∞—Ç–∏—Å—è –¥–æ –≥—Ä—É–ø–∏", callback_data="join_group")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    update.message.reply_text("–û–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é:", reply_markup=reply_markup)

def create_group(update: Update, context: CallbackContext):
    """ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á —Å—Ç–≤–æ—Ä—é—î –Ω–æ–≤—É –≥—Ä—É–ø—É """
    query = update.callback_query
    query.answer()

    user_id = str(query.from_user.id)
    group_code = generate_group_code()

    data["groups"][group_code] = []
    data["user_groups"].setdefault(user_id, []).append(group_code)
    save_data()

    query.edit_message_text(f"‚úÖ –ì—Ä—É–ø–∞ —Å—Ç–≤–æ—Ä–µ–Ω–∞! –ö–æ–¥ –¥–ª—è –ø—Ä–∏—î–¥–Ω–∞–Ω–Ω—è: `{group_code}`", parse_mode="Markdown")

def join_group(update: Update, context: CallbackContext):
    """ –ó–∞–ø–∏—Ç—É—î —É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∫–æ–¥ –¥–ª—è –ø—Ä–∏—î–¥–Ω–∞–Ω–Ω—è """
    query = update.callback_query
    query.answer()
    query.edit_message_text("‚úç –í–≤–µ–¥—ñ—Ç—å –∫–æ–¥ –≥—Ä—É–ø–∏, —â–æ–± –ø—Ä–∏—î–¥–Ω–∞—Ç–∏—Å—è:")

    context.user_data["waiting_for_group_code"] = True

def handle_text(update: Update, context: CallbackContext):
    """ –û–±—Ä–æ–±–ª—è—î –≤–≤–µ–¥–µ–Ω–Ω—è –∫–æ–¥—É –≥—Ä—É–ø–∏ –∞–±–æ –¥–æ–¥–∞–≤–∞–Ω–Ω—è —Ç–æ–≤–∞—Ä—É """
    user_id = str(update.message.from_user.id)
    text = update.message.text.strip()

    if context.user_data.get("waiting_for_group_code"):
        if text in data["groups"]:
            data["user_groups"].setdefault(user_id, []).append(text)
            save_data()
            update.message.reply_text(f"‚úÖ –í–∏ –ø—Ä–∏—î–¥–Ω–∞–ª–∏—Å—è –¥–æ –≥—Ä—É–ø–∏ {text}!")
        else:
            update.message.reply_text("‚ùå –ö–æ–¥ –≥—Ä—É–ø–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ —â–µ —Ä–∞–∑.")
        
        context.user_data["waiting_for_group_code"] = False
        return

    # –Ø–∫—â–æ —Ü–µ –Ω–µ –∫–æ–¥ –≥—Ä—É–ø–∏, –≤–≤–∞–∂–∞—î–º–æ, —â–æ —Ü–µ —Ç–æ–≤–∞—Ä
    active_group = context.user_data.get("active_group")
    if active_group:
        data["groups"][active_group].append(text.capitalize())
        save_data()
        update.message.reply_text(f"‚úÖ –î–æ–¥–∞–Ω–æ: {text.capitalize()}")
    else:
        update.message.reply_text("‚ùå –°–ø–æ—á–∞—Ç–∫—É –æ–±–µ—Ä—ñ—Ç—å –≥—Ä—É–ø—É –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é –∫–æ–º–∞–Ω–¥–∏ /groups.")

def list_groups(update: Update, context: CallbackContext):
    """ –ü–æ–∫–∞–∑—É—î —Å–ø–∏—Å–∫–∏, –¥–æ —è–∫–∏—Ö –ø—Ä–∏—î–¥–Ω–∞–≤—Å—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á """
    user_id = str(update.message.from_user.id)
    user_groups = data["user_groups"].get(user_id, [])

    if not user_groups:
        update.message.reply_text("‚ÑπÔ∏è –í–∏ —â–µ –Ω–µ –ø—Ä–∏—î–¥–Ω–∞–ª–∏—Å—è –¥–æ –∂–æ–¥–Ω–æ—ó –≥—Ä—É–ø–∏.")
        return

    keyboard = [[InlineKeyboardButton(f"üìå {code}", callback_data=f"set_group_{code}")] for code in user_groups]
    reply_markup = InlineKeyboardMarkup(keyboard)
    update.message.reply_text("üîπ –í–∏–±–µ—Ä—ñ—Ç—å –≥—Ä—É–ø—É –¥–ª—è —Ä–æ–±–æ—Ç–∏:", reply_markup=reply_markup)

def set_active_group(update: Update, context: CallbackContext):
    """ –í—Å—Ç–∞–Ω–æ–≤–ª—é—î –∞–∫—Ç–∏–≤–Ω—É –≥—Ä—É–ø—É –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ """
    query = update.callback_query
    query.answer()

    group_code = query.data.split("_")[2]
    context.user_data["active_group"] = group_code

    query.edit_message_text(f"‚úÖ –í–∏ –ø—Ä–∞—Ü—é—î—Ç–µ –∑ –≥—Ä—É–ø–æ—é `{group_code}`", parse_mode="Markdown")

def list_items(update: Update, context: CallbackContext):
    """ –í—ñ–¥–æ–±—Ä–∞–∂–∞—î —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä—ñ–≤ —É –≤–∏–±—Ä–∞–Ω—ñ–π –≥—Ä—É–ø—ñ """
    active_group = context.user_data.get("active_group")
    
    if not active_group:
        update.message.reply_text("‚ùå –í–∏ –Ω–µ –æ–±—Ä–∞–ª–∏ –≥—Ä—É–ø—É. –í–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ /groups, —â–æ–± –≤–∏–±—Ä–∞—Ç–∏.")
        return

    shopping_list = data["groups"].get(active_group, [])
    
    if not shopping_list:
        update.message.reply_text("üì≠ –°–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π.")
        return

    keyboard = [[InlineKeyboardButton("üóë", callback_data=f"remove_{active_group}_{item}")] for item in shopping_list]
    reply_markup = InlineKeyboardMarkup(keyboard)

    update.message.reply_text("üõí *–°–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫:*", reply_markup=reply_markup, parse_mode="Markdown")

def remove_item(update: Update, context: CallbackContext):
    """ –í–∏–¥–∞–ª—è—î —Ç–æ–≤–∞—Ä —ñ–∑ –≥—Ä—É–ø–æ–≤–æ–≥–æ —Å–ø–∏—Å–∫—É """
    query = update.callback_query
    query.answer()

    data_parts = query.data.split("_")
    group_code = data_parts[1]
    item_to_remove = data_parts[2]

    if group_code in data["groups"] and item_to_remove in data["groups"][group_code]:
        data["groups"][group_code].remove(item_to_remove)
        save_data()
        query.edit_message_text(f"üóë –í–∏–¥–∞–ª–µ–Ω–æ: {item_to_remove}")

        text, reply_markup = list_items(update, context)
        query.message.reply_text(text, reply_markup=reply_markup, parse_mode="Markdown")

def main():
    updater = Updater(TOKEN, use_context=True)
    dp = updater.dispatcher

    dp.add_handler(CommandHandler("start", start))
    dp.add_handler(CommandHandler("groups", list_groups))
    dp.add_handler(CommandHandler("list", list_items))
    dp.add_handler(CallbackQueryHandler(create_group, pattern="create_group"))
    dp.add_handler(CallbackQueryHandler(join_group, pattern="join_group"))
    dp.add_handler(CallbackQueryHandler(set_active_group, pattern="set_group_.*"))
    dp.add_handler(CallbackQueryHandler(remove_item, pattern="remove_.*"))
    dp.add_handler(MessageHandler(Filters.text & ~Filters.command, handle_text))

    updater.start_polling()
    updater.idle()

if __name__ == '__main__':
    main()
