import os
import json
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Updater, CommandHandler, CallbackQueryHandler, MessageHandler, Filters, CallbackContext

# –û—Ç—Ä–∏–º—É—î–º–æ —Ç–æ–∫–µ–Ω –∑ –æ—Ç–æ—á–µ–Ω–Ω—è
TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")

if not TOKEN:
    raise ValueError("‚ùå –ü–û–ú–ò–õ–ö–ê: –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ TELEGRAM_BOT_TOKEN —É –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞!")

# –§–∞–π–ª –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Å–ø–∏—Å–∫—ñ–≤
DATA_FILE = "shopping_lists.json"

# –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å–ø–∏—Å–∫—ñ–≤ –∑ —Ñ–∞–π–ª—É
def load_data():
    if os.path.exists(DATA_FILE):
        with open(DATA_FILE, "r", encoding="utf-8") as f:
            try:
                return json.load(f)
            except json.JSONDecodeError:
                return {}
    return {}

# –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Å–ø–∏—Å–∫—ñ–≤ —É —Ñ–∞–π–ª
def save_data():
    with open(DATA_FILE, "w", encoding="utf-8") as f:
        json.dump(user_shopping_lists, f, ensure_ascii=False, indent=2)

# –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –¥–∞–Ω—ñ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç—ñ
user_shopping_lists = load_data()

def start(update: Update, context: CallbackContext):
    update.message.reply_text(
        "–ü—Ä–∏–≤—ñ—Ç! –ù–∞–¥—ñ—à–ª–∏ –º–µ–Ω—ñ –Ω–∞–∑–≤–∏ —Ç–æ–≤–∞—Ä—ñ–≤, —è–∫—ñ –ø–æ—Ç—Ä—ñ–±–Ω–æ –∫—É–ø–∏—Ç–∏. "
        "–©–æ–± –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —Å–ø–∏—Å–æ–∫ —ñ–∑ –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è, –≤–≤–µ–¥–∏ /list. "
        "–©–æ–± –æ—á–∏—Å—Ç–∏—Ç–∏ —Å–ø–∏—Å–æ–∫ ‚Äì /clear."
    )

def get_user_list(user_id):
    """ –û—Ç—Ä–∏–º—É—î —Å–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ """
    return user_shopping_lists.setdefault(str(user_id), [])

def add_item(update: Update, context: CallbackContext):
    """ –î–æ–¥–∞—î —Ç–æ–≤–∞—Ä –¥–æ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ —Å–ø–∏—Å–∫—É """
    user_id = str(update.message.from_user.id)
    item = update.message.text.strip().lower()  # –ü—Ä–∏–≤–æ–¥–∏–º–æ –¥–æ –Ω–∏–∂–Ω—å–æ–≥–æ —Ä–µ–≥—ñ—Å—Ç—Ä—É

    if item:
        user_list = get_user_list(user_id)
        user_list.append(item)
        save_data()  # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Å–ø–∏—Å–æ–∫ —É —Ñ–∞–π–ª
        update.message.reply_text(f"‚úÖ –î–æ–¥–∞–Ω–æ: {item}\nüìå –£ –≤–∞—à–æ–º—É —Å–ø–∏—Å–∫—É: {len(user_list)} –ø—Ä–µ–¥–º–µ—Ç—ñ–≤.")
    else:
        update.message.reply_text("‚ö† –í–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω—É –Ω–∞–∑–≤—É —Ç–æ–≤–∞—Ä—É.")

def generate_list_with_buttons(user_id):
    """ –§–æ—Ä–º—É—î —Å–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫ –∑ –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ """
    user_list = get_user_list(user_id)

    if not user_list:
        return "üì≠ –í–∞—à —Å–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π.", None

    keyboard = []
    for item in user_list:
        keyboard.append([InlineKeyboardButton(f"üóë –í–∏–¥–∞–ª–∏—Ç–∏ {item}", callback_data=f"confirm_remove_{user_id}_{item}")])

    reply_markup = InlineKeyboardMarkup(keyboard)
    return "üõí *–í–∞—à —Å–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫:*", reply_markup

def list_items(update: Update, context: CallbackContext):
    """ –í—ñ–¥–æ–±—Ä–∞–∂–∞—î —Å–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫ –∑ –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è """
    user_id = str(update.message.from_user.id)
    text, reply_markup = generate_list_with_buttons(user_id)
    update.message.reply_text(text, reply_markup=reply_markup, parse_mode="Markdown")

def clear_list(update: Update, context: CallbackContext):
    """ –û—á–∏—â–∞—î —Å–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫ —Ç—ñ–ª—å–∫–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ """
    user_id = str(update.message.from_user.id)
    user_shopping_lists[user_id] = []  # –û—á–∏—â–∞—î–º–æ —Å–ø–∏—Å–æ–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    save_data()  # –û–Ω–æ–≤–ª—é—î–º–æ JSON-—Ñ–∞–π–ª
    update.message.reply_text("üßπ –í–∞—à —Å–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫ –æ—á–∏—â–µ–Ω–æ.")

def confirm_remove_callback(update: Update, context: CallbackContext):
    """ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è —Ç–æ–≤–∞—Ä—É """
    query = update.callback_query
    query.answer()

    data = query.data.split("_")  # –ü–∞—Ä—Å–∏–º–æ callback_data
    user_id = data[2]  # ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    item_to_remove = data[3]  # –¢–æ–≤–∞—Ä, —è–∫–∏–π –ø–æ—Ç—Ä—ñ–±–Ω–æ –≤–∏–¥–∞–ª–∏—Ç–∏

    keyboard = [
        [InlineKeyboardButton("‚úÖ –¢–∞–∫, –≤–∏–¥–∞–ª–∏—Ç–∏", callback_data=f"remove_{user_id}_{item_to_remove}")],
        [InlineKeyboardButton("‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data="cancel")]
    ]

    reply_markup = InlineKeyboardMarkup(keyboard)
    query.edit_message_text(f"‚ùó –í–∏ –¥—ñ–π—Å–Ω–æ —Ö–æ—á–µ—Ç–µ –≤–∏–¥–∞–ª–∏—Ç–∏ *{item_to_remove}*?", reply_markup=reply_markup, parse_mode="Markdown")

def remove_item_callback(update: Update, context: CallbackContext):
    """ –í–∏–¥–∞–ª—è—î —Ç–æ–≤–∞—Ä –ø—ñ—Å–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è """
    query = update.callback_query
    query.answer()

    data = query.data.split("_")  # –ü–∞—Ä—Å–∏–º–æ callback_data
    user_id = data[1]  # ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    item_to_remove = data[2]  # –¢–æ–≤–∞—Ä, —è–∫–∏–π –ø–æ—Ç—Ä—ñ–±–Ω–æ –≤–∏–¥–∞–ª–∏—Ç–∏

    if user_id in user_shopping_lists and item_to_remove in user_shopping_lists[user_id]:
        user_shopping_lists[user_id].remove(item_to_remove)
        save_data()  # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –ø—ñ—Å–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è
        query.edit_message_text(f"üóë –í–∏–¥–∞–ª–µ–Ω–æ: {item_to_remove}")

        # –û–Ω–æ–≤–ª—é—î–º–æ —Å–ø–∏—Å–æ–∫ –ø—ñ—Å–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è
        text, reply_markup = generate_list_with_buttons(user_id)
        query.message.reply_text(text, reply_markup=reply_markup, parse_mode="Markdown")
    else:
        query.edit_message_text("‚ö† –¢–æ–≤–∞—Ä –≤–∂–µ –≤–∏–¥–∞–ª–µ–Ω–æ –∞–±–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!")

def cancel_action(update: Update, context: CallbackContext):
    """ –í—ñ–¥–º—ñ–Ω–∞ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è """
    query = update.callback_query
    query.answer()
    query.edit_message_text("‚ùå –í–∏–¥–∞–ª–µ–Ω–Ω—è —Å–∫–∞—Å–æ–≤–∞–Ω–æ.")

def main():
    # –ó–∞–ø—É—Å–∫–∞—î–º–æ –±–æ—Ç–∞ –∑ –ø—Ä–∞–≤–∏–ª—å–Ω–∏–º —Ç–æ–∫–µ–Ω–æ–º
    updater = Updater(TOKEN, use_context=True)
    dp = updater.dispatcher

    dp.add_handler(CommandHandler("start", start))
    dp.add_handler(CommandHandler("list", list_items))
    dp.add_handler(CommandHandler("clear", clear_list))
    dp.add_handler(CallbackQueryHandler(confirm_remove_callback, pattern="confirm_remove_.*"))  # –û–±—Ä–æ–±–Ω–∏–∫ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è
    dp.add_handler(CallbackQueryHandler(remove_item_callback, pattern="remove_.*"))  # –í–∏–¥–∞–ª–µ–Ω–Ω—è —Ç–æ–≤–∞—Ä—É
    dp.add_handler(CallbackQueryHandler(cancel_action, pattern="cancel"))  # –í—ñ–¥–º—ñ–Ω–∞ –¥—ñ—ó
    dp.add_handler(MessageHandler(Filters.text & ~Filters.command, add_item))

    updater.start_polling()
    updater.idle()

if __name__ == '__main__':
    main()
