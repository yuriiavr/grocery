import os
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Updater, CommandHandler, CallbackQueryHandler, MessageHandler, Filters, CallbackContext

# –û—Ç—Ä–∏–º—É—î–º–æ —Ç–æ–∫–µ–Ω –∑ –æ—Ç–æ—á–µ–Ω–Ω—è
TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")

if not TOKEN:
    raise ValueError("‚ùå –ü–û–ú–ò–õ–ö–ê: –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ TELEGRAM_BOT_TOKEN —É –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞!")

# –ì–ª–æ–±–∞–ª—å–Ω–∏–π —Å–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫
shopping_list = []

def start(update: Update, context: CallbackContext):
    update.message.reply_text(
        "–ü—Ä–∏–≤—ñ—Ç! –ù–∞–¥—ñ—à–ª–∏ –º–µ–Ω—ñ –Ω–∞–∑–≤–∏ —Ç–æ–≤–∞—Ä—ñ–≤, —è–∫—ñ –ø–æ—Ç—Ä—ñ–±–Ω–æ –∫—É–ø–∏—Ç–∏. "
        "–©–æ–± –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —Å–ø–∏—Å–æ–∫ —ñ–∑ –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è, –≤–≤–µ–¥–∏ /list. "
        "–©–æ–± –æ—á–∏—Å—Ç–∏—Ç–∏ —Å–ø–∏—Å–æ–∫ ‚Äì /clear."
    )

def add_item(update: Update, context: CallbackContext):
    """ –î–æ–¥–∞—î —Ç–æ–≤–∞—Ä –¥–æ —Å–ø–∏—Å–∫—É """
    global shopping_list
    item = update.message.text.strip().lower()  # –ü—Ä–∏–≤–æ–¥–∏–º–æ –¥–æ –Ω–∏–∂–Ω—å–æ–≥–æ —Ä–µ–≥—ñ—Å—Ç—Ä—É
    if item:
        shopping_list.append(item)
        update.message.reply_text(f"‚úÖ –î–æ–¥–∞–Ω–æ: {item}\nüìå –£ —Å–ø–∏—Å–∫—É: {len(shopping_list)} –ø—Ä–µ–¥–º–µ—Ç—ñ–≤.")
    else:
        update.message.reply_text("‚ö† –í–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω—É –Ω–∞–∑–≤—É —Ç–æ–≤–∞—Ä—É.")

def generate_list_with_buttons():
    """ –§–æ—Ä–º—É—î —Å–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫ –∑ –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è """
    if not shopping_list:
        return "üì≠ –°–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π.", None

    keyboard = []
    for item in shopping_list:
        keyboard.append([InlineKeyboardButton(f"üóë –í–∏–¥–∞–ª–∏—Ç–∏ {item}", callback_data=f"remove_{item}")])

    reply_markup = InlineKeyboardMarkup(keyboard)
    return "üõí *–°–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫:*", reply_markup

def list_items(update: Update, context: CallbackContext):
    """ –í—ñ–¥–æ–±—Ä–∞–∂–∞—î —Å–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫ –∑ –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è """
    text, reply_markup = generate_list_with_buttons()
    update.message.reply_text(text, reply_markup=reply_markup, parse_mode="Markdown")

def clear_list(update: Update, context: CallbackContext):
    """ –û—á–∏—â–∞—î –≤–µ—Å—å —Å–ø–∏—Å–æ–∫ """
    global shopping_list
    shopping_list = []
    update.message.reply_text("üßπ –°–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫ –æ—á–∏—â–µ–Ω–æ.")

def remove_item_callback(update: Update, context: CallbackContext):
    """ –í–∏–¥–∞–ª—è—î —Ç–æ–≤–∞—Ä –ø—ñ—Å–ª—è –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –Ω–∞ –∫–Ω–æ–ø–∫—É """
    global shopping_list
    query = update.callback_query
    query.answer()

    item_to_remove = query.data.replace("remove_", "")  # –û—Ç—Ä–∏–º—É—î–º–æ –Ω–∞–∑–≤—É —Ç–æ–≤–∞—Ä—É

    if item_to_remove in shopping_list:
        shopping_list.remove(item_to_remove)
        query.edit_message_text(f"üóë –í–∏–¥–∞–ª–µ–Ω–æ: {item_to_remove}")

        # –û–Ω–æ–≤–ª—é—î–º–æ —Å–ø–∏—Å–æ–∫ –ø—ñ—Å–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è
        text, reply_markup = generate_list_with_buttons()
        query.message.reply_text(text, reply_markup=reply_markup, parse_mode="Markdown")
    else:
        query.edit_message_text("‚ö† –¢–æ–≤–∞—Ä –≤–∂–µ –≤–∏–¥–∞–ª–µ–Ω–æ –∞–±–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!")

def main():
    # –ó–∞–ø—É—Å–∫–∞—î–º–æ –±–æ—Ç–∞ –∑ –ø—Ä–∞–≤–∏–ª—å–Ω–∏–º —Ç–æ–∫–µ–Ω–æ–º
    updater = Updater(TOKEN, use_context=True)
    dp = updater.dispatcher

    dp.add_handler(CommandHandler("start", start))
    dp.add_handler(CommandHandler("list", list_items))
    dp.add_handler(CommandHandler("clear", clear_list))
    dp.add_handler(CallbackQueryHandler(remove_item_callback))  # –û–±—Ä–æ–±–Ω–∏–∫ –∫–Ω–æ–ø–æ–∫ –≤–∏–¥–∞–ª–µ–Ω–Ω—è
    dp.add_handler(MessageHandler(Filters.text & ~Filters.command, add_item))

    updater.start_polling()
    updater.idle()

if __name__ == '__main__':
    main()
